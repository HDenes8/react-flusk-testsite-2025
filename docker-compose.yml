services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000" # Expose React's development server
    volumes:
      - ./frontend:/usr/src/app # Mount local code into the container
      - /usr/src/app/node_modules # Prevent overwriting node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true # Enable polling for file changes (useful for Windows/macOS)
    command: ["npm", "start"] # Run React's development server

  backend:
    build:
      context: ./backend
    ports:
      - "5000:5000"
    environment:
      - DATABASE_URL=postgresql://postgres:password@db:5432/sortify
    depends_on:
      - db

  db:
    image: postgres:15
    container_name: postgres_container
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: sortify
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/db-init:/docker-entrypoint-initdb.d/ # Mount the initialization script
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin_container
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com # Default pgAdmin login email
      PGADMIN_DEFAULT_PASSWORD: admin          # Default pgAdmin login password
    ports:
      - "8080:80" # Expose pgAdmin on port 8080
    depends_on:
      - db

volumes:
  postgres_data:
